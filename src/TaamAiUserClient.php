<?php

declare(strict_types=1);

/*
 * TaamAiUserLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace TaamAiUserLib;

use Core\ClientBuilder;
use Core\Utils\CoreHelper;
use TaamAiUserLib\Controllers\AddonFeaturesController;
use TaamAiUserLib\Controllers\AuthController;
use TaamAiUserLib\Controllers\ChatWithPdfController;
use TaamAiUserLib\Controllers\CustimTemplatesController;
use TaamAiUserLib\Controllers\MiscController;
use TaamAiUserLib\Controllers\ProductController;
use TaamAiUserLib\Controllers\PromptTemplateController;
use TaamAiUserLib\Controllers\TemplatesController;
use TaamAiUserLib\Controllers\WorkbookAndFoldersController;
use TaamAiUserLib\Utils\CompatibilityConverter;
use Unirest\Configuration;
use Unirest\HttpClient;

class TaamAiUserClient implements ConfigurationInterface
{
    private $templates;

    private $auth;

    private $workbookAndFolders;

    private $custimTemplates;

    private $product;

    private $promptTemplate;

    private $chatWithPdf;

    private $addonFeatures;

    private $misc;

    private $bearerAuthManager;

    private $config;

    private $client;

    /**
     * @see TaamAiUserClientBuilder::init()
     * @see TaamAiUserClientBuilder::build()
     *
     * @param array $config
     */
    public function __construct(array $config = [])
    {
        $this->config = array_merge(ConfigurationDefaults::_ALL, CoreHelper::clone($config));
        $this->bearerAuthManager = new BearerAuthManager(
            $this->config['accessToken'] ?? ConfigurationDefaults::ACCESS_TOKEN
        );
        $this->client = ClientBuilder::init(new HttpClient(Configuration::init($this)))
            ->converter(new CompatibilityConverter())
            ->jsonHelper(ApiHelper::getJsonHelper())
            ->apiCallback($this->config['httpCallback'] ?? null)
            ->userAgent('APIMATIC 3.0')
            ->serverUrls(self::ENVIRONMENT_MAP[$this->getEnvironment()], Server::SERVER_1)
            ->authManagers(['global' => $this->bearerAuthManager])
            ->build();
    }

    /**
     * Create a builder with the current client's configurations.
     *
     * @return TaamAiUserClientBuilder TaamAiUserClientBuilder instance
     */
    public function toBuilder(): TaamAiUserClientBuilder
    {
        return TaamAiUserClientBuilder::init()
            ->timeout($this->getTimeout())
            ->enableRetries($this->shouldEnableRetries())
            ->numberOfRetries($this->getNumberOfRetries())
            ->retryInterval($this->getRetryInterval())
            ->backOffFactor($this->getBackOffFactor())
            ->maximumRetryWaitTime($this->getMaximumRetryWaitTime())
            ->retryOnTimeout($this->shouldRetryOnTimeout())
            ->httpStatusCodesToRetry($this->getHttpStatusCodesToRetry())
            ->httpMethodsToRetry($this->getHttpMethodsToRetry())
            ->environment($this->getEnvironment())
            ->accessToken($this->bearerAuthManager->getAccessToken())
            ->httpCallback($this->config['httpCallback'] ?? null);
    }

    public function getTimeout(): int
    {
        return $this->config['timeout'] ?? ConfigurationDefaults::TIMEOUT;
    }

    public function shouldEnableRetries(): bool
    {
        return $this->config['enableRetries'] ?? ConfigurationDefaults::ENABLE_RETRIES;
    }

    public function getNumberOfRetries(): int
    {
        return $this->config['numberOfRetries'] ?? ConfigurationDefaults::NUMBER_OF_RETRIES;
    }

    public function getRetryInterval(): float
    {
        return $this->config['retryInterval'] ?? ConfigurationDefaults::RETRY_INTERVAL;
    }

    public function getBackOffFactor(): float
    {
        return $this->config['backOffFactor'] ?? ConfigurationDefaults::BACK_OFF_FACTOR;
    }

    public function getMaximumRetryWaitTime(): int
    {
        return $this->config['maximumRetryWaitTime'] ?? ConfigurationDefaults::MAXIMUM_RETRY_WAIT_TIME;
    }

    public function shouldRetryOnTimeout(): bool
    {
        return $this->config['retryOnTimeout'] ?? ConfigurationDefaults::RETRY_ON_TIMEOUT;
    }

    public function getHttpStatusCodesToRetry(): array
    {
        return $this->config['httpStatusCodesToRetry'] ?? ConfigurationDefaults::HTTP_STATUS_CODES_TO_RETRY;
    }

    public function getHttpMethodsToRetry(): array
    {
        return $this->config['httpMethodsToRetry'] ?? ConfigurationDefaults::HTTP_METHODS_TO_RETRY;
    }

    public function getEnvironment(): string
    {
        return $this->config['environment'] ?? ConfigurationDefaults::ENVIRONMENT;
    }

    public function getBearerAuthCredentials(): ?BearerAuthCredentials
    {
        return $this->bearerAuthManager;
    }

    /**
     * Get the client configuration as an associative array
     *
     * @see TaamAiUserClientBuilder::getConfiguration()
     */
    public function getConfiguration(): array
    {
        return $this->toBuilder()->getConfiguration();
    }

    /**
     * Clone this client and override given configuration options
     *
     * @see TaamAiUserClientBuilder::build()
     */
    public function withConfiguration(array $config): self
    {
        return new self(array_merge($this->config, $config));
    }

    /**
     * Get the base uri for a given server in the current environment.
     *
     * @param string $server Server name
     *
     * @return string Base URI
     */
    public function getBaseUri(string $server = Server::SERVER_1): string
    {
        return $this->client->getGlobalRequest($server)->getQueryUrl();
    }

    /**
     * Returns Templates Controller
     */
    public function getTemplatesController(): TemplatesController
    {
        if ($this->templates == null) {
            $this->templates = new TemplatesController($this->client);
        }
        return $this->templates;
    }

    /**
     * Returns Auth Controller
     */
    public function getAuthController(): AuthController
    {
        if ($this->auth == null) {
            $this->auth = new AuthController($this->client);
        }
        return $this->auth;
    }

    /**
     * Returns Workbook and Folders Controller
     */
    public function getWorkbookAndFoldersController(): WorkbookAndFoldersController
    {
        if ($this->workbookAndFolders == null) {
            $this->workbookAndFolders = new WorkbookAndFoldersController($this->client);
        }
        return $this->workbookAndFolders;
    }

    /**
     * Returns Custim Templates Controller
     */
    public function getCustimTemplatesController(): CustimTemplatesController
    {
        if ($this->custimTemplates == null) {
            $this->custimTemplates = new CustimTemplatesController($this->client);
        }
        return $this->custimTemplates;
    }

    /**
     * Returns Product Controller
     */
    public function getProductController(): ProductController
    {
        if ($this->product == null) {
            $this->product = new ProductController($this->client);
        }
        return $this->product;
    }

    /**
     * Returns Prompt Template Controller
     */
    public function getPromptTemplateController(): PromptTemplateController
    {
        if ($this->promptTemplate == null) {
            $this->promptTemplate = new PromptTemplateController($this->client);
        }
        return $this->promptTemplate;
    }

    /**
     * Returns Chat With Pdf Controller
     */
    public function getChatWithPdfController(): ChatWithPdfController
    {
        if ($this->chatWithPdf == null) {
            $this->chatWithPdf = new ChatWithPdfController($this->client);
        }
        return $this->chatWithPdf;
    }

    /**
     * Returns Addon Features Controller
     */
    public function getAddonFeaturesController(): AddonFeaturesController
    {
        if ($this->addonFeatures == null) {
            $this->addonFeatures = new AddonFeaturesController($this->client);
        }
        return $this->addonFeatures;
    }

    /**
     * Returns Misc Controller
     */
    public function getMiscController(): MiscController
    {
        if ($this->misc == null) {
            $this->misc = new MiscController($this->client);
        }
        return $this->misc;
    }

    /**
     * A map of all base urls used in different environments and servers
     *
     * @var array
     */
    private const ENVIRONMENT_MAP = [
        Environment::PRODUCTION => [
            Server::SERVER_1 => 'https://taam.ai/api',
            Server::SERVER_2 => 'http://127.0.0.1:8000/api'
        ]
    ];
}
