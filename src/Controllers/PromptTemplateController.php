<?php

declare(strict_types=1);

/*
 * TaamAiUserLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace TaamAiUserLib\Controllers;

use Core\Request\Parameters\QueryParam;
use CoreInterfaces\Core\Request\RequestMethod;
use TaamAiUserLib\Exceptions\ApiException;
use TaamAiUserLib\Models\CreatePromptTemplate;
use TaamAiUserLib\Models\DeletePrmoptTemplate;
use TaamAiUserLib\Models\GeneratePromptTemplate;
use TaamAiUserLib\Models\NewRequest1;
use TaamAiUserLib\Models\ParmanentDeletePromptTemplate;
use TaamAiUserLib\Models\PromptTemplateLikeOrRemoveFromLike;
use TaamAiUserLib\Models\PromptTemplates;
use TaamAiUserLib\Models\RestorePromptTemplate;
use TaamAiUserLib\Models\TrashedPromptTemplates;
use TaamAiUserLib\Server;

class PromptTemplateController extends BaseController
{
    /**
     * @param int $userId
     * @param string $cat
     * @param string $subCat
     *
     * @return PromptTemplates Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function promptTemplates(int $userId, string $cat, string $subCat): PromptTemplates
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/prompt-templates')
            ->server(Server::SERVER_2)
            ->auth('global')
            ->parameters(
                QueryParam::init('user_id', $userId),
                QueryParam::init('cat', $cat),
                QueryParam::init('sub_cat', $subCat)
            );

        $_resHandler = $this->responseHandler()->type(PromptTemplates::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $userId
     * @param int $templateId
     *
     * @return NewRequest1 Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function addAndRemoveFromBookmarkPromptTemplate(int $userId, int $templateId): NewRequest1
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/prompt-template/add-bookmark')
            ->server(Server::SERVER_2)
            ->auth('global')
            ->parameters(QueryParam::init('user_id', $userId), QueryParam::init('template_id', $templateId));

        $_resHandler = $this->responseHandler()->type(NewRequest1::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $userId
     * @param int $templateId
     *
     * @return PromptTemplateLikeOrRemoveFromLike Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function promptTemplateLikeOrRemoveFromLike(
        int $userId,
        int $templateId
    ): PromptTemplateLikeOrRemoveFromLike {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/prompt-template/add-like')
            ->server(Server::SERVER_2)
            ->auth('global')
            ->parameters(QueryParam::init('user_id', $userId), QueryParam::init('template_id', $templateId));

        $_resHandler = $this->responseHandler()->type(PromptTemplateLikeOrRemoveFromLike::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $userId
     * @param int $mPublic
     * @param int $edit
     * @param string $name
     * @param int $activate
     * @param int $tone
     * @param string $prompt
     * @param string $language
     * @param string $package
     * @param string $category
     * @param string $names0
     * @param string $placeholders0
     * @param string $code0
     * @param string $inputField0
     *
     * @return CreatePromptTemplate Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createPromptTemplate(
        int $userId,
        int $mPublic,
        int $edit,
        string $name,
        int $activate,
        int $tone,
        string $prompt,
        string $language,
        string $package,
        string $category,
        string $names0,
        string $placeholders0,
        string $code0,
        string $inputField0
    ): CreatePromptTemplate {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/prompt-template/create')
            ->server(Server::SERVER_2)
            ->auth('global')
            ->parameters(
                QueryParam::init('user_id', $userId),
                QueryParam::init('public', $mPublic),
                QueryParam::init('edit', $edit),
                QueryParam::init('name', $name),
                QueryParam::init('activate', $activate),
                QueryParam::init('tone', $tone),
                QueryParam::init('prompt', $prompt),
                QueryParam::init('language', $language),
                QueryParam::init('package', $package),
                QueryParam::init('category', $category),
                QueryParam::init('names[0]', $names0),
                QueryParam::init('placeholders[0]', $placeholders0),
                QueryParam::init('code[0]', $code0),
                QueryParam::init('input_field[0]', $inputField0)
            );

        $_resHandler = $this->responseHandler()->type(CreatePromptTemplate::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $userId
     *
     * @return TrashedPromptTemplates Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function trashedPromptTemplates(int $userId): TrashedPromptTemplates
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/prompt-templates/trashed')
            ->server(Server::SERVER_2)
            ->auth('global')
            ->parameters(QueryParam::init('user_id', $userId));

        $_resHandler = $this->responseHandler()->type(TrashedPromptTemplates::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $userId
     * @param int $templateId
     *
     * @return DeletePrmoptTemplate Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deletePrmoptTemplate(int $userId, int $templateId): DeletePrmoptTemplate
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/prompt-templates/delete')
            ->server(Server::SERVER_2)
            ->auth('global')
            ->parameters(QueryParam::init('user_id', $userId), QueryParam::init('template_id', $templateId));

        $_resHandler = $this->responseHandler()->type(DeletePrmoptTemplate::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $userId
     * @param int $templateId
     *
     * @return RestorePromptTemplate Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function restorePromptTemplate(int $userId, int $templateId): RestorePromptTemplate
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/prompt-templates/restore')
            ->server(Server::SERVER_2)
            ->auth('global')
            ->parameters(QueryParam::init('user_id', $userId), QueryParam::init('template_id', $templateId));

        $_resHandler = $this->responseHandler()->type(RestorePromptTemplate::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $userId
     * @param int $templateId
     *
     * @return ParmanentDeletePromptTemplate Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function parmanentDeletePromptTemplate(int $userId, int $templateId): ParmanentDeletePromptTemplate
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/prompt-templates/permanent-delete')
            ->server(Server::SERVER_2)
            ->auth('global')
            ->parameters(QueryParam::init('user_id', $userId), QueryParam::init('template_id', $templateId));

        $_resHandler = $this->responseHandler()->type(ParmanentDeletePromptTemplate::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $userId
     * @param string $templateCode
     * @param string $language
     * @param int $maxResults
     * @param int $words
     * @param float $creativity
     * @param string $title
     * @param string $description
     * @param int $workbookId
     * @param int $folderId
     * @param string $text1
     *
     * @return GeneratePromptTemplate Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function generatePromptTemplate(
        int $userId,
        string $templateCode,
        string $language,
        int $maxResults,
        int $words,
        float $creativity,
        string $title,
        string $description,
        int $workbookId,
        int $folderId,
        string $text1
    ): GeneratePromptTemplate {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/templates/prompt-generate')
            ->server(Server::SERVER_2)
            ->auth('global')
            ->parameters(
                QueryParam::init('user_id', $userId),
                QueryParam::init('template_code', $templateCode),
                QueryParam::init('language', $language),
                QueryParam::init('max_results', $maxResults),
                QueryParam::init('words', $words),
                QueryParam::init('creativity', $creativity),
                QueryParam::init('title', $title),
                QueryParam::init('description', $description),
                QueryParam::init('workbook_id', $workbookId),
                QueryParam::init('folder_id', $folderId),
                QueryParam::init('text1', $text1)
            );

        $_resHandler = $this->responseHandler()->type(GeneratePromptTemplate::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
