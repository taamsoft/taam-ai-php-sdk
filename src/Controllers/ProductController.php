<?php

declare(strict_types=1);

/*
 * TaamAiUserLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace TaamAiUserLib\Controllers;

use Core\Request\Parameters\FormParam;
use Core\Request\Parameters\QueryParam;
use CoreInterfaces\Core\Request\RequestMethod;
use TaamAiUserLib\Exceptions\ApiException;
use TaamAiUserLib\Models\CreateProduct;
use TaamAiUserLib\Models\DeleteProduct;
use TaamAiUserLib\Models\NewRequest1;
use TaamAiUserLib\Models\RestoreProduct;
use TaamAiUserLib\Models\TrashedProducts;
use TaamAiUserLib\Models\UpdateProduct;
use TaamAiUserLib\Models\UserProductd;
use TaamAiUserLib\Server;

class ProductController extends BaseController
{
    /**
     * @param int $userId
     *
     * @return UserProductd Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function userProductd(int $userId): UserProductd
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/products')
            ->server(Server::SERVER_2)
            ->auth('global')
            ->parameters(QueryParam::init('user_id', $userId));

        $_resHandler = $this->responseHandler()->type(UserProductd::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $userId
     *
     * @return TrashedProducts Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function trashedProducts(int $userId): TrashedProducts
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/products/trashed')
            ->server(Server::SERVER_2)
            ->auth('global')
            ->parameters(QueryParam::init('user_id', $userId));

        $_resHandler = $this->responseHandler()->type(TrashedProducts::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $userId
     * @param string $name
     * @param string $description
     * @param string $bulletPoints
     * @param string $targetAudience
     * @param string $tags0
     * @param string $tags1
     *
     * @return CreateProduct Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createProduct(
        int $userId,
        string $name,
        string $description,
        string $bulletPoints,
        string $targetAudience,
        string $tags0,
        string $tags1
    ): CreateProduct {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/products/create')
            ->server(Server::SERVER_2)
            ->auth('global')
            ->parameters(
                FormParam::init('user_id', $userId),
                FormParam::init('name', $name),
                FormParam::init('description', $description),
                FormParam::init('bullet_points', $bulletPoints),
                FormParam::init('target_audience', $targetAudience),
                FormParam::init('tags[0]', $tags0),
                FormParam::init('tags[1]', $tags1)
            );

        $_resHandler = $this->responseHandler()->type(CreateProduct::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $userId
     * @param int $productId
     *
     * @return DeleteProduct Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteProduct(int $userId, int $productId): DeleteProduct
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/products/delete')
            ->server(Server::SERVER_2)
            ->auth('global')
            ->parameters(QueryParam::init('user_id', $userId), QueryParam::init('product_id', $productId));

        $_resHandler = $this->responseHandler()->type(DeleteProduct::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $userId
     * @param int $productId
     *
     * @return RestoreProduct Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function restoreProduct(int $userId, int $productId): RestoreProduct
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/products/restore')
            ->server(Server::SERVER_2)
            ->auth('global')
            ->parameters(QueryParam::init('user_id', $userId), QueryParam::init('product_id', $productId));

        $_resHandler = $this->responseHandler()->type(RestoreProduct::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $userId
     * @param int $productId
     *
     * @return NewRequest1 Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function parmenentDeleteProduct(int $userId, int $productId): NewRequest1
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/products/permanent-delete')
            ->server(Server::SERVER_2)
            ->auth('global')
            ->parameters(QueryParam::init('user_id', $userId), QueryParam::init('product_id', $productId));

        $_resHandler = $this->responseHandler()->type(NewRequest1::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $userId
     * @param int $productId
     * @param string $name
     * @param string $description
     * @param int $bulletPoints
     * @param string $targetAudience
     * @param string $tags0
     *
     * @return UpdateProduct Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function updateProduct(
        int $userId,
        int $productId,
        string $name,
        string $description,
        int $bulletPoints,
        string $targetAudience,
        string $tags0
    ): UpdateProduct {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/products/update')
            ->server(Server::SERVER_2)
            ->auth('global')
            ->parameters(
                QueryParam::init('user_id', $userId),
                QueryParam::init('product_id', $productId),
                QueryParam::init('name', $name),
                QueryParam::init('description', $description),
                QueryParam::init('bullet_points', $bulletPoints),
                QueryParam::init('target_audience', $targetAudience),
                QueryParam::init('tags[0]', $tags0)
            );

        $_resHandler = $this->responseHandler()->type(UpdateProduct::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
