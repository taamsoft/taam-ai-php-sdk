<?php

declare(strict_types=1);

/*
 * TaamAiUserLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace TaamAiUserLib\Controllers;

use Core\Request\Parameters\QueryParam;
use CoreInterfaces\Core\Request\RequestMethod;
use TaamAiUserLib\Exceptions\ApiException;
use TaamAiUserLib\Models\AddAndRemoveFromFavDocument;
use TaamAiUserLib\Models\AllWorkbooksLive;
use TaamAiUserLib\Models\ContentsInWorkBook;
use TaamAiUserLib\Models\CreateFolderLive;
use TaamAiUserLib\Models\CreateWorkbookLivw;
use TaamAiUserLib\Models\DeleteAllKindOfDocuments;
use TaamAiUserLib\Models\DeleteFolder;
use TaamAiUserLib\Models\DeleteWorkspaceLive;
use TaamAiUserLib\Models\JoinWorkbook;
use TaamAiUserLib\Models\JoinWorkbookRequestr;
use TaamAiUserLib\Models\NewRequest;
use TaamAiUserLib\Models\PermanentDeleteDocument;
use TaamAiUserLib\Models\PermanentDeleteWorkspaceLive;
use TaamAiUserLib\Models\RejectWorkbook;
use TaamAiUserLib\Models\RestoreDocuemntOfAllTypeContentVoiceoverImagesTranscriptCode;
use TaamAiUserLib\Models\RestoreWorkspaceLive;
use TaamAiUserLib\Models\TrashedFoldersLive;
use TaamAiUserLib\Models\TrashedWorkspacesLive;
use TaamAiUserLib\Models\UserChats;
use TaamAiUserLib\Models\WorkbookDetailLive;
use TaamAiUserLib\Models\WorkbookImages;
use TaamAiUserLib\Models\WorkbookPolicies;
use TaamAiUserLib\Models\WorkbookTranscripts;
use TaamAiUserLib\Models\WorkbookVoiceovers;
use TaamAiUserLib\Server;

class WorkbookAndFoldersController extends BaseController
{
    /**
     * @param int $userId
     *
     * @return AllWorkbooksLive Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function allWorkbooks(int $userId): AllWorkbooksLive
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/workbooks')
            ->auth('global')
            ->parameters(QueryParam::init('user_id', $userId));

        $_resHandler = $this->responseHandler()->type(AllWorkbooksLive::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $userId
     * @param string $workbookName
     *
     * @return CreateWorkbookLivw Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createWorkbook(int $userId, string $workbookName): CreateWorkbookLivw
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/workbooks/create')
            ->server(Server::SERVER_2)
            ->auth('global')
            ->parameters(QueryParam::init('user_id', $userId), QueryParam::init('workbook_name', $workbookName));

        $_resHandler = $this->responseHandler()->type(CreateWorkbookLivw::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $userId
     * @param int $workbookId
     *
     * @return WorkbookDetailLive Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function workbookDetail(int $userId, int $workbookId): WorkbookDetailLive
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/workbooks/detail')
            ->server(Server::SERVER_2)
            ->auth('global')
            ->parameters(QueryParam::init('user_id', $userId), QueryParam::init('workbook_id', $workbookId));

        $_resHandler = $this->responseHandler()->type(WorkbookDetailLive::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $userId
     * @param int $workbookId
     *
     * @return DeleteWorkspaceLive Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteWorkspace(int $userId, int $workbookId): DeleteWorkspaceLive
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/workbooks/delete')
            ->auth('global')
            ->parameters(QueryParam::init('user_id', $userId), QueryParam::init('workbook_id', $workbookId));

        $_resHandler = $this->responseHandler()->type(DeleteWorkspaceLive::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $userId
     *
     * @return TrashedWorkspacesLive Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function trashedWorkspaces(int $userId): TrashedWorkspacesLive
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/workbooks/trashed')
            ->server(Server::SERVER_2)
            ->auth('global')
            ->parameters(QueryParam::init('user_id', $userId));

        $_resHandler = $this->responseHandler()->type(TrashedWorkspacesLive::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $userId
     * @param int $workbookId
     *
     * @return RestoreWorkspaceLive Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function restoreWorkspace(int $userId, int $workbookId): RestoreWorkspaceLive
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/workbooks/restore')
            ->auth('global')
            ->parameters(QueryParam::init('user_id', $userId), QueryParam::init('workbook_id', $workbookId));

        $_resHandler = $this->responseHandler()->type(RestoreWorkspaceLive::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param string $folderName
     * @param int $workbookId
     * @param int $userId
     *
     * @return CreateFolderLive Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createFolder(string $folderName, int $workbookId, int $userId): CreateFolderLive
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/workbooks/create-folder')
            ->server(Server::SERVER_2)
            ->auth('global')
            ->parameters(
                QueryParam::init('folder_name', $folderName),
                QueryParam::init('workbook_id', $workbookId),
                QueryParam::init('user_id', $userId)
            );

        $_resHandler = $this->responseHandler()->type(CreateFolderLive::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $userId
     * @param int $folderId
     *
     * @return DeleteFolder Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteFolder(int $userId, int $folderId): DeleteFolder
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/workbooks/folders/delete')
            ->auth('global')
            ->parameters(QueryParam::init('user_id', $userId), QueryParam::init('folder_id', $folderId));

        $_resHandler = $this->responseHandler()->type(DeleteFolder::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $userId
     * @param int $folderId
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function restoreFolder(int $userId, int $folderId): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/workbooks/folders/restore')
            ->auth('global')
            ->parameters(QueryParam::init('user_id', $userId), QueryParam::init('folder_id', $folderId));

        $this->execute($_reqBuilder);
    }

    /**
     * @param int $userId
     * @param int $workbookId
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function setDefualtWorkspace(int $userId, int $workbookId): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/workbooks/set-default')
            ->auth('global')
            ->parameters(QueryParam::init('user_id', $userId), QueryParam::init('workbook_id', $workbookId));

        $this->execute($_reqBuilder);
    }

    /**
     * @param int $userId
     * @param int $folderId
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function permanentDeleteFolder(int $userId, int $folderId): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/workbooks/folders/permanent-delete')
            ->auth('global')
            ->parameters(QueryParam::init('user_id', $userId), QueryParam::init('folder_id', $folderId));

        $this->execute($_reqBuilder);
    }

    /**
     * @param int $userId
     * @param string $type
     * @param int $workbookId
     *
     * @return ContentsInWorkBook Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function contentsInWorkBook(int $userId, string $type, int $workbookId): ContentsInWorkBook
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/workbooks/contents')
            ->auth('global')
            ->parameters(
                QueryParam::init('user_id', $userId),
                QueryParam::init('type', $type),
                QueryParam::init('workbook_id', $workbookId)
            );

        $_resHandler = $this->responseHandler()->type(ContentsInWorkBook::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $userId
     * @param int $workbookId
     *
     * @return TrashedFoldersLive Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function trashedFolders(int $userId, int $workbookId): TrashedFoldersLive
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/workbooks/trashed-folders')
            ->server(Server::SERVER_2)
            ->auth('global')
            ->parameters(QueryParam::init('user_id', $userId), QueryParam::init('workbook_id', $workbookId));

        $_resHandler = $this->responseHandler()->type(TrashedFoldersLive::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $userId
     * @param string $type
     * @param int $workbookId
     * @param int $folderId
     *
     * @return WorkbookVoiceovers Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function workbookVoiceovers(int $userId, string $type, int $workbookId, int $folderId): WorkbookVoiceovers
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/workbooks/voiceovers')
            ->auth('global')
            ->parameters(
                QueryParam::init('user_id', $userId),
                QueryParam::init('type', $type),
                QueryParam::init('workbook_id', $workbookId),
                QueryParam::init('folder_id', $folderId)
            );

        $_resHandler = $this->responseHandler()->type(WorkbookVoiceovers::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $userId
     * @param string $type
     * @param string $workbookId
     * @param int $folderId
     *
     * @return WorkbookTranscripts Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function workbookTranscripts(
        int $userId,
        string $type,
        string $workbookId,
        int $folderId
    ): WorkbookTranscripts {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/workbooks/transcripts')
            ->auth('global')
            ->parameters(
                QueryParam::init('user_id', $userId),
                QueryParam::init('type', $type),
                QueryParam::init('workbook_id', $workbookId),
                QueryParam::init('folder_id', $folderId)
            );

        $_resHandler = $this->responseHandler()->type(WorkbookTranscripts::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @return PermanentDeleteWorkspaceLive Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function permanentDeleteWorkspace(): PermanentDeleteWorkspaceLive
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/')->auth('global');

        $_resHandler = $this->responseHandler()->type(PermanentDeleteWorkspaceLive::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $userId
     * @param string $type
     * @param string $workbookId
     * @param int $folderId
     *
     * @return WorkbookImages Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function workbookImages(int $userId, string $type, string $workbookId, int $folderId): WorkbookImages
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/workbooks/images')
            ->auth('global')
            ->parameters(
                QueryParam::init('user_id', $userId),
                QueryParam::init('type', $type),
                QueryParam::init('workbook_id', $workbookId),
                QueryParam::init('folder_id', $folderId)
            );

        $_resHandler = $this->responseHandler()->type(WorkbookImages::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $userId
     * @param string $type
     * @param string $workbookId
     * @param int $folderId
     *
     * @return NewRequest Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function workbookCodes(int $userId, string $type, string $workbookId, int $folderId): NewRequest
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/workbooks/codes')
            ->auth('global')
            ->parameters(
                QueryParam::init('user_id', $userId),
                QueryParam::init('type', $type),
                QueryParam::init('workbook_id', $workbookId),
                QueryParam::init('folder_id', $folderId)
            );

        $_resHandler = $this->responseHandler()->type(NewRequest::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $userId
     * @param string $type
     *
     * @return UserChats Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function userChats(int $userId, string $type): UserChats
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/workbooks/chats')
            ->auth('global')
            ->parameters(QueryParam::init('user_id', $userId), QueryParam::init('type', $type));

        $_resHandler = $this->responseHandler()->type(UserChats::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $userId
     * @param int $id
     * @param string $type
     *
     * @return PermanentDeleteDocument Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function permanentDeleteDocument(int $userId, int $id, string $type): PermanentDeleteDocument
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/documents/permanent-delete')
            ->server(Server::SERVER_2)
            ->auth('global')
            ->parameters(
                QueryParam::init('user_id', $userId),
                QueryParam::init('id', $id),
                QueryParam::init('type', $type)
            );

        $_resHandler = $this->responseHandler()->type(PermanentDeleteDocument::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $id
     * @param int $userId
     * @param string $type
     *
     * @return RestoreDocuemntOfAllTypeContentVoiceoverImagesTranscriptCode Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function restoreDocuemntOfAllTypeContentVoiceoverImagesTranscriptCode(
        int $id,
        int $userId,
        string $type
    ): RestoreDocuemntOfAllTypeContentVoiceoverImagesTranscriptCode {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/documents/restore')
            ->server(Server::SERVER_2)
            ->auth('global')
            ->parameters(
                QueryParam::init('id', $id),
                QueryParam::init('user_id', $userId),
                QueryParam::init('type', $type)
            );

        $_resHandler = $this->responseHandler()
            ->type(RestoreDocuemntOfAllTypeContentVoiceoverImagesTranscriptCode::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @return DeleteAllKindOfDocuments Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteAllKindOfDocuments(): DeleteAllKindOfDocuments
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/documents/delete')
            ->server(Server::SERVER_2)
            ->auth('global');

        $_resHandler = $this->responseHandler()->type(DeleteAllKindOfDocuments::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $id
     * @param int $userId
     * @param string $type
     *
     * @return AddAndRemoveFromFavDocument Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function addAndRemoveFromFavDocument(int $id, int $userId, string $type): AddAndRemoveFromFavDocument
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/documents/add-to-fav')
            ->server(Server::SERVER_2)
            ->auth('global')
            ->parameters(
                QueryParam::init('id', $id),
                QueryParam::init('user_id', $userId),
                QueryParam::init('type', $type)
            );

        $_resHandler = $this->responseHandler()->type(AddAndRemoveFromFavDocument::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $workbookId
     * @param int $userId
     * @param string $email
     *
     * @return JoinWorkbookRequestr Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function joinWorkbookRequestr(int $workbookId, int $userId, string $email): JoinWorkbookRequestr
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/worbooks/join-request')
            ->server(Server::SERVER_2)
            ->auth('global')
            ->parameters(
                QueryParam::init('workbook_id', $workbookId),
                QueryParam::init('user_id', $userId),
                QueryParam::init('email', $email)
            );

        $_resHandler = $this->responseHandler()->type(JoinWorkbookRequestr::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $workbookId
     * @param int $userId
     *
     * @return JoinWorkbook Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function joinWorkbook(int $workbookId, int $userId): JoinWorkbook
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/workbooks/join-workbook')
            ->server(Server::SERVER_2)
            ->auth('global')
            ->parameters(QueryParam::init('workbook_id', $workbookId), QueryParam::init('user_id', $userId));

        $_resHandler = $this->responseHandler()->type(JoinWorkbook::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $workbookId
     * @param int $userId
     *
     * @return RejectWorkbook Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function rejectWorkbook(int $workbookId, int $userId): RejectWorkbook
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/workbooks/reject-workbook')
            ->server(Server::SERVER_2)
            ->auth('global')
            ->parameters(QueryParam::init('workbook_id', $workbookId), QueryParam::init('user_id', $userId));

        $_resHandler = $this->responseHandler()->type(RejectWorkbook::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $userId
     * @param string $type
     *
     * @return WorkbookPolicies Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function workbookPolicies(int $userId, string $type): WorkbookPolicies
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/workbooks/policies')
            ->auth('global')
            ->parameters(QueryParam::init('user_id', $userId), QueryParam::init('type', $type));

        $_resHandler = $this->responseHandler()->type(WorkbookPolicies::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createLinkToAccessAnyDocument(): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/')->auth('global');

        $this->execute($_reqBuilder);
    }
}
