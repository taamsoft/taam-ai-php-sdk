<?php

declare(strict_types=1);

/*
 * TaamAiUserLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace TaamAiUserLib\Controllers;

use Core\Request\Parameters\QueryParam;
use CoreInterfaces\Core\Request\RequestMethod;
use TaamAiUserLib\Exceptions\ApiException;
use TaamAiUserLib\Models\CreateCustomTemplate;
use TaamAiUserLib\Models\CustomTemplateGenerate;
use TaamAiUserLib\Models\DeleteCustomTemplate;
use TaamAiUserLib\Models\PermanentDeleteCustomTemplate;
use TaamAiUserLib\Models\RestoreCustomTemplate;
use TaamAiUserLib\Models\TrashedCustomTemplates;
use TaamAiUserLib\Server;

class CustimTemplatesController extends BaseController
{
    /**
     * @param int $userId
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function customTemplates(int $userId): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/templates/custom-template')
            ->auth('global')
            ->parameters(QueryParam::init('user_id', $userId));

        $this->execute($_reqBuilder);
    }

    /**
     * @param int $userId
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function favCustomTemplates(int $userId): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/templates/custom/favorite')
            ->auth('global')
            ->parameters(QueryParam::init('user_id', $userId));

        $this->execute($_reqBuilder);
    }

    /**
     * @param int $userId
     * @param string $templateCode
     * @param string $language
     * @param int $maxResults
     * @param int $words
     * @param float $creativity
     * @param string $title
     * @param string $description
     * @param int $workbookId
     * @param int $folderId
     * @param string $text
     * @param string $text2
     *
     * @return CustomTemplateGenerate Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function customTemplateGenerate(
        int $userId,
        string $templateCode,
        string $language,
        int $maxResults,
        int $words,
        float $creativity,
        string $title,
        string $description,
        int $workbookId,
        int $folderId,
        string $text,
        string $text2
    ): CustomTemplateGenerate {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/templates/custom-generate')
            ->auth('global')
            ->parameters(
                QueryParam::init('user_id', $userId),
                QueryParam::init('template_code', $templateCode),
                QueryParam::init('language', $language),
                QueryParam::init('max_results', $maxResults),
                QueryParam::init('words', $words),
                QueryParam::init('creativity', $creativity),
                QueryParam::init('title', $title),
                QueryParam::init('description', $description),
                QueryParam::init('workbook_id', $workbookId),
                QueryParam::init('folder_id', $folderId),
                QueryParam::init('text', $text),
                QueryParam::init('text2', $text2)
            );

        $_resHandler = $this->responseHandler()->type(CustomTemplateGenerate::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @return CreateCustomTemplate Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function createCustomTemplate(): CreateCustomTemplate
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/')->auth('global');

        $_resHandler = $this->responseHandler()->type(CreateCustomTemplate::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $userId
     *
     * @return TrashedCustomTemplates Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function trashedCustomTemplates(int $userId): TrashedCustomTemplates
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/customTemplate/trashed')
            ->server(Server::SERVER_2)
            ->auth('global')
            ->parameters(QueryParam::init('user_id', $userId));

        $_resHandler = $this->responseHandler()->type(TrashedCustomTemplates::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $userId
     * @param int $templateId
     *
     * @return DeleteCustomTemplate Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function deleteCustomTemplate(int $userId, int $templateId): DeleteCustomTemplate
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/customTemplate/delete')
            ->server(Server::SERVER_2)
            ->auth('global')
            ->parameters(QueryParam::init('user_id', $userId), QueryParam::init('template_id', $templateId));

        $_resHandler = $this->responseHandler()->type(DeleteCustomTemplate::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @param int $userId
     * @param int $templateId
     *
     * @return RestoreCustomTemplate Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function restoreCustomTemplate(int $userId, int $templateId): RestoreCustomTemplate
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/customTemplate/restore')
            ->server(Server::SERVER_2)
            ->auth('global')
            ->parameters(QueryParam::init('user_id', $userId), QueryParam::init('template_id', $templateId));

        $_resHandler = $this->responseHandler()->type(RestoreCustomTemplate::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * @return PermanentDeleteCustomTemplate Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function permanentDeleteCustomTemplate(): PermanentDeleteCustomTemplate
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/')->auth('global');

        $_resHandler = $this->responseHandler()->type(PermanentDeleteCustomTemplate::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
