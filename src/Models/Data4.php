<?php

declare(strict_types=1);

/*
 * TaamAiUserLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace TaamAiUserLib\Models;

use stdClass;
use TaamAiUserLib\ApiHelper;

class Data4 implements \JsonSerializable
{
    /**
     * @var int
     */
    private $id;

    /**
     * @var int
     */
    private $userId;

    /**
     * @var string|null
     */
    private $title;

    /**
     * @var string|null
     */
    private $inputText;

    /**
     * @var string|null
     */
    private $resultText;

    /**
     * @var string|null
     */
    private $model;

    /**
     * @var string
     */
    private $language;

    /**
     * @var string|null
     */
    private $templateCode;

    /**
     * @var string
     */
    private $templateName;

    /**
     * @var string|null
     */
    private $workbook;

    /**
     * @var int
     */
    private $workbookId;

    /**
     * @var int
     */
    private $workbookFolderId;

    /**
     * @var string
     */
    private $icon;

    /**
     * @var string
     */
    private $group;

    /**
     * @var string|null
     */
    private $tags;

    /**
     * @var int
     */
    private $draft;

    /**
     * @var string
     */
    private $languageName;

    /**
     * @var string
     */
    private $languageFlag;

    /**
     * @var int
     */
    private $tokens;

    /**
     * @var string|null|int|null
     */
    private $words;

    /**
     * @var string
     */
    private $planType;

    /**
     * @var string
     */
    private $createdAt;

    /**
     * @var string
     */
    private $updatedAt;

    /**
     * @var string|null
     */
    private $deletedAt;

    /**
     * @param int $id
     * @param int $userId
     * @param string $language
     * @param string $templateName
     * @param int $workbookId
     * @param int $workbookFolderId
     * @param string $icon
     * @param string $group
     * @param int $draft
     * @param string $languageName
     * @param string $languageFlag
     * @param int $tokens
     * @param string $planType
     * @param string $createdAt
     * @param string $updatedAt
     */
    public function __construct(
        int $id,
        int $userId,
        string $language,
        string $templateName,
        int $workbookId,
        int $workbookFolderId,
        string $icon,
        string $group,
        int $draft,
        string $languageName,
        string $languageFlag,
        int $tokens,
        string $planType,
        string $createdAt,
        string $updatedAt
    ) {
        $this->id = $id;
        $this->userId = $userId;
        $this->language = $language;
        $this->templateName = $templateName;
        $this->workbookId = $workbookId;
        $this->workbookFolderId = $workbookFolderId;
        $this->icon = $icon;
        $this->group = $group;
        $this->draft = $draft;
        $this->languageName = $languageName;
        $this->languageFlag = $languageFlag;
        $this->tokens = $tokens;
        $this->planType = $planType;
        $this->createdAt = $createdAt;
        $this->updatedAt = $updatedAt;
    }

    /**
     * Returns Id.
     */
    public function getId(): int
    {
        return $this->id;
    }

    /**
     * Sets Id.
     *
     * @required
     * @maps id
     */
    public function setId(int $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns User Id.
     */
    public function getUserId(): int
    {
        return $this->userId;
    }

    /**
     * Sets User Id.
     *
     * @required
     * @maps user_id
     */
    public function setUserId(int $userId): void
    {
        $this->userId = $userId;
    }

    /**
     * Returns Title.
     */
    public function getTitle(): ?string
    {
        return $this->title;
    }

    /**
     * Sets Title.
     *
     * @maps title
     */
    public function setTitle(?string $title): void
    {
        $this->title = $title;
    }

    /**
     * Returns Input Text.
     */
    public function getInputText(): ?string
    {
        return $this->inputText;
    }

    /**
     * Sets Input Text.
     *
     * @maps input_text
     */
    public function setInputText(?string $inputText): void
    {
        $this->inputText = $inputText;
    }

    /**
     * Returns Result Text.
     */
    public function getResultText(): ?string
    {
        return $this->resultText;
    }

    /**
     * Sets Result Text.
     *
     * @maps result_text
     */
    public function setResultText(?string $resultText): void
    {
        $this->resultText = $resultText;
    }

    /**
     * Returns Model.
     */
    public function getModel(): ?string
    {
        return $this->model;
    }

    /**
     * Sets Model.
     *
     * @maps model
     */
    public function setModel(?string $model): void
    {
        $this->model = $model;
    }

    /**
     * Returns Language.
     */
    public function getLanguage(): string
    {
        return $this->language;
    }

    /**
     * Sets Language.
     *
     * @required
     * @maps language
     */
    public function setLanguage(string $language): void
    {
        $this->language = $language;
    }

    /**
     * Returns Template Code.
     */
    public function getTemplateCode(): ?string
    {
        return $this->templateCode;
    }

    /**
     * Sets Template Code.
     *
     * @maps template_code
     */
    public function setTemplateCode(?string $templateCode): void
    {
        $this->templateCode = $templateCode;
    }

    /**
     * Returns Template Name.
     */
    public function getTemplateName(): string
    {
        return $this->templateName;
    }

    /**
     * Sets Template Name.
     *
     * @required
     * @maps template_name
     */
    public function setTemplateName(string $templateName): void
    {
        $this->templateName = $templateName;
    }

    /**
     * Returns Workbook.
     */
    public function getWorkbook(): ?string
    {
        return $this->workbook;
    }

    /**
     * Sets Workbook.
     *
     * @maps workbook
     */
    public function setWorkbook(?string $workbook): void
    {
        $this->workbook = $workbook;
    }

    /**
     * Returns Workbook Id.
     */
    public function getWorkbookId(): int
    {
        return $this->workbookId;
    }

    /**
     * Sets Workbook Id.
     *
     * @required
     * @maps workbook_id
     */
    public function setWorkbookId(int $workbookId): void
    {
        $this->workbookId = $workbookId;
    }

    /**
     * Returns Workbook Folder Id.
     */
    public function getWorkbookFolderId(): int
    {
        return $this->workbookFolderId;
    }

    /**
     * Sets Workbook Folder Id.
     *
     * @required
     * @maps workbook_folder_id
     */
    public function setWorkbookFolderId(int $workbookFolderId): void
    {
        $this->workbookFolderId = $workbookFolderId;
    }

    /**
     * Returns Icon.
     */
    public function getIcon(): string
    {
        return $this->icon;
    }

    /**
     * Sets Icon.
     *
     * @required
     * @maps icon
     */
    public function setIcon(string $icon): void
    {
        $this->icon = $icon;
    }

    /**
     * Returns Group.
     */
    public function getGroup(): string
    {
        return $this->group;
    }

    /**
     * Sets Group.
     *
     * @required
     * @maps group
     */
    public function setGroup(string $group): void
    {
        $this->group = $group;
    }

    /**
     * Returns Tags.
     */
    public function getTags(): ?string
    {
        return $this->tags;
    }

    /**
     * Sets Tags.
     *
     * @maps tags
     */
    public function setTags(?string $tags): void
    {
        $this->tags = $tags;
    }

    /**
     * Returns Draft.
     */
    public function getDraft(): int
    {
        return $this->draft;
    }

    /**
     * Sets Draft.
     *
     * @required
     * @maps draft
     */
    public function setDraft(int $draft): void
    {
        $this->draft = $draft;
    }

    /**
     * Returns Language Name.
     */
    public function getLanguageName(): string
    {
        return $this->languageName;
    }

    /**
     * Sets Language Name.
     *
     * @required
     * @maps language_name
     */
    public function setLanguageName(string $languageName): void
    {
        $this->languageName = $languageName;
    }

    /**
     * Returns Language Flag.
     */
    public function getLanguageFlag(): string
    {
        return $this->languageFlag;
    }

    /**
     * Sets Language Flag.
     *
     * @required
     * @maps language_flag
     */
    public function setLanguageFlag(string $languageFlag): void
    {
        $this->languageFlag = $languageFlag;
    }

    /**
     * Returns Tokens.
     */
    public function getTokens(): int
    {
        return $this->tokens;
    }

    /**
     * Sets Tokens.
     *
     * @required
     * @maps tokens
     */
    public function setTokens(int $tokens): void
    {
        $this->tokens = $tokens;
    }

    /**
     * Returns Words.
     *
     * @return string|null|int|null
     */
    public function getWords()
    {
        return $this->words;
    }

    /**
     * Sets Words.
     *
     * @maps words
     * @mapsBy anyOf(oneOf(anyOf(string,null),int),null)
     *
     * @param string|null|int|null $words
     */
    public function setWords($words): void
    {
        $this->words = $words;
    }

    /**
     * Returns Plan Type.
     */
    public function getPlanType(): string
    {
        return $this->planType;
    }

    /**
     * Sets Plan Type.
     *
     * @required
     * @maps plan_type
     */
    public function setPlanType(string $planType): void
    {
        $this->planType = $planType;
    }

    /**
     * Returns Created At.
     */
    public function getCreatedAt(): string
    {
        return $this->createdAt;
    }

    /**
     * Sets Created At.
     *
     * @required
     * @maps created_at
     */
    public function setCreatedAt(string $createdAt): void
    {
        $this->createdAt = $createdAt;
    }

    /**
     * Returns Updated At.
     */
    public function getUpdatedAt(): string
    {
        return $this->updatedAt;
    }

    /**
     * Sets Updated At.
     *
     * @required
     * @maps updated_at
     */
    public function setUpdatedAt(string $updatedAt): void
    {
        $this->updatedAt = $updatedAt;
    }

    /**
     * Returns Deleted At.
     */
    public function getDeletedAt(): ?string
    {
        return $this->deletedAt;
    }

    /**
     * Sets Deleted At.
     *
     * @maps deleted_at
     */
    public function setDeletedAt(?string $deletedAt): void
    {
        $this->deletedAt = $deletedAt;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['id']                 = $this->id;
        $json['user_id']            = $this->userId;
        $json['title']              = $this->title;
        $json['input_text']         = $this->inputText;
        $json['result_text']        = $this->resultText;
        $json['model']              = $this->model;
        $json['language']           = $this->language;
        $json['template_code']      = $this->templateCode;
        $json['template_name']      = $this->templateName;
        $json['workbook']           = $this->workbook;
        $json['workbook_id']        = $this->workbookId;
        $json['workbook_folder_id'] = $this->workbookFolderId;
        $json['icon']               = $this->icon;
        $json['group']              = $this->group;
        $json['tags']               = $this->tags;
        $json['draft']              = $this->draft;
        $json['language_name']      = $this->languageName;
        $json['language_flag']      = $this->languageFlag;
        $json['tokens']             = $this->tokens;
        $json['words']              =
            ApiHelper::getJsonHelper()->verifyTypes(
                $this->words,
                'anyOf(oneOf(anyOf(string,null),int),null)'
            );
        $json['plan_type']          = $this->planType;
        $json['created_at']         = $this->createdAt;
        $json['updated_at']         = $this->updatedAt;
        $json['deleted_at']         = $this->deletedAt;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
