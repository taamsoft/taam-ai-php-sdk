<?php

declare(strict_types=1);

/*
 * TaamAiUserLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace TaamAiUserLib\Models;

use stdClass;

class Data12 implements \JsonSerializable
{
    /**
     * @var string
     */
    private $userId;

    /**
     * @var string|null
     */
    private $description;

    /**
     * @var bool
     */
    private $status;

    /**
     * @var bool
     */
    private $professional;

    /**
     * @var string
     */
    private $templateCode;

    /**
     * @var string
     */
    private $name;

    /**
     * @var string
     */
    private $icon;

    /**
     * @var string
     */
    private $group;

    /**
     * @var string
     */
    private $slug;

    /**
     * @var string
     */
    private $prompt;

    /**
     * @var bool
     */
    private $tone;

    /**
     * @var Field[]
     */
    private $fields;

    /**
     * @var string
     */
    private $package;

    /**
     * @var string
     */
    private $updatedAt;

    /**
     * @var string
     */
    private $createdAt;

    /**
     * @var int
     */
    private $id;

    /**
     * @param string $userId
     * @param bool $status
     * @param bool $professional
     * @param string $templateCode
     * @param string $name
     * @param string $icon
     * @param string $group
     * @param string $slug
     * @param string $prompt
     * @param bool $tone
     * @param Field[] $fields
     * @param string $package
     * @param string $updatedAt
     * @param string $createdAt
     * @param int $id
     */
    public function __construct(
        string $userId,
        bool $status,
        bool $professional,
        string $templateCode,
        string $name,
        string $icon,
        string $group,
        string $slug,
        string $prompt,
        bool $tone,
        array $fields,
        string $package,
        string $updatedAt,
        string $createdAt,
        int $id
    ) {
        $this->userId = $userId;
        $this->status = $status;
        $this->professional = $professional;
        $this->templateCode = $templateCode;
        $this->name = $name;
        $this->icon = $icon;
        $this->group = $group;
        $this->slug = $slug;
        $this->prompt = $prompt;
        $this->tone = $tone;
        $this->fields = $fields;
        $this->package = $package;
        $this->updatedAt = $updatedAt;
        $this->createdAt = $createdAt;
        $this->id = $id;
    }

    /**
     * Returns User Id.
     */
    public function getUserId(): string
    {
        return $this->userId;
    }

    /**
     * Sets User Id.
     *
     * @required
     * @maps user_id
     */
    public function setUserId(string $userId): void
    {
        $this->userId = $userId;
    }

    /**
     * Returns Description.
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * Sets Description.
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description = $description;
    }

    /**
     * Returns Status.
     */
    public function getStatus(): bool
    {
        return $this->status;
    }

    /**
     * Sets Status.
     *
     * @required
     * @maps status
     */
    public function setStatus(bool $status): void
    {
        $this->status = $status;
    }

    /**
     * Returns Professional.
     */
    public function getProfessional(): bool
    {
        return $this->professional;
    }

    /**
     * Sets Professional.
     *
     * @required
     * @maps professional
     */
    public function setProfessional(bool $professional): void
    {
        $this->professional = $professional;
    }

    /**
     * Returns Template Code.
     */
    public function getTemplateCode(): string
    {
        return $this->templateCode;
    }

    /**
     * Sets Template Code.
     *
     * @required
     * @maps template_code
     */
    public function setTemplateCode(string $templateCode): void
    {
        $this->templateCode = $templateCode;
    }

    /**
     * Returns Name.
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     *
     * @required
     * @maps name
     */
    public function setName(string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Icon.
     */
    public function getIcon(): string
    {
        return $this->icon;
    }

    /**
     * Sets Icon.
     *
     * @required
     * @maps icon
     */
    public function setIcon(string $icon): void
    {
        $this->icon = $icon;
    }

    /**
     * Returns Group.
     */
    public function getGroup(): string
    {
        return $this->group;
    }

    /**
     * Sets Group.
     *
     * @required
     * @maps group
     */
    public function setGroup(string $group): void
    {
        $this->group = $group;
    }

    /**
     * Returns Slug.
     */
    public function getSlug(): string
    {
        return $this->slug;
    }

    /**
     * Sets Slug.
     *
     * @required
     * @maps slug
     */
    public function setSlug(string $slug): void
    {
        $this->slug = $slug;
    }

    /**
     * Returns Prompt.
     */
    public function getPrompt(): string
    {
        return $this->prompt;
    }

    /**
     * Sets Prompt.
     *
     * @required
     * @maps prompt
     */
    public function setPrompt(string $prompt): void
    {
        $this->prompt = $prompt;
    }

    /**
     * Returns Tone.
     */
    public function getTone(): bool
    {
        return $this->tone;
    }

    /**
     * Sets Tone.
     *
     * @required
     * @maps tone
     */
    public function setTone(bool $tone): void
    {
        $this->tone = $tone;
    }

    /**
     * Returns Fields.
     *
     * @return Field[]
     */
    public function getFields(): array
    {
        return $this->fields;
    }

    /**
     * Sets Fields.
     *
     * @required
     * @maps fields
     *
     * @param Field[] $fields
     */
    public function setFields(array $fields): void
    {
        $this->fields = $fields;
    }

    /**
     * Returns Package.
     */
    public function getPackage(): string
    {
        return $this->package;
    }

    /**
     * Sets Package.
     *
     * @required
     * @maps package
     */
    public function setPackage(string $package): void
    {
        $this->package = $package;
    }

    /**
     * Returns Updated At.
     */
    public function getUpdatedAt(): string
    {
        return $this->updatedAt;
    }

    /**
     * Sets Updated At.
     *
     * @required
     * @maps updated_at
     */
    public function setUpdatedAt(string $updatedAt): void
    {
        $this->updatedAt = $updatedAt;
    }

    /**
     * Returns Created At.
     */
    public function getCreatedAt(): string
    {
        return $this->createdAt;
    }

    /**
     * Sets Created At.
     *
     * @required
     * @maps created_at
     */
    public function setCreatedAt(string $createdAt): void
    {
        $this->createdAt = $createdAt;
    }

    /**
     * Returns Id.
     */
    public function getId(): int
    {
        return $this->id;
    }

    /**
     * Sets Id.
     *
     * @required
     * @maps id
     */
    public function setId(int $id): void
    {
        $this->id = $id;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['user_id']       = $this->userId;
        $json['description']   = $this->description;
        $json['status']        = $this->status;
        $json['professional']  = $this->professional;
        $json['template_code'] = $this->templateCode;
        $json['name']          = $this->name;
        $json['icon']          = $this->icon;
        $json['group']         = $this->group;
        $json['slug']          = $this->slug;
        $json['prompt']        = $this->prompt;
        $json['tone']          = $this->tone;
        $json['fields']        = $this->fields;
        $json['package']       = $this->package;
        $json['updated_at']    = $this->updatedAt;
        $json['created_at']    = $this->createdAt;
        $json['id']            = $this->id;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
