<?php

declare(strict_types=1);

/*
 * TaamAiUserLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace TaamAiUserLib\Models\Builders;

use Core\Utils\CoreHelper;
use TaamAiUserLib\Models\User;

/**
 * Builder for model User
 *
 * @see User
 */
class UserBuilder
{
    /**
     * @var User
     */
    private $instance;

    private function __construct(User $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new user Builder object.
     */
    public static function init(
        int $id,
        string $name,
        string $jobRole,
        string $email,
        string $emailVerifiedAt,
        string $status,
        string $group,
        string $workbook,
        int $workbookId,
        int $workbookFolderId,
        int $productId,
        int $planId,
        string $country,
        int $availableWords,
        int $availableWordsPrepaid,
        int $totalWords,
        int $availableImages,
        int $availableImagesPrepaid,
        int $totalImages,
        int $balance,
        int $totalChars,
        int $availableChars,
        int $availableCharsPrepaid,
        string $totalMinutes,
        string $availableMinutes,
        string $availableMinutesPrepaid,
        int $memberRole,
        int $parentId,
        int $google2faEnabled,
        string $referralId,
        string $referredBy,
        string $defaultVoiceoverLanguage,
        int $defaultTempLanguage,
        string $defaultVoiceoverVoice,
        string $createdAt,
        string $updatedAt
    ): self {
        return new self(new User(
            $id,
            $name,
            $jobRole,
            $email,
            $emailVerifiedAt,
            $status,
            $group,
            $workbook,
            $workbookId,
            $workbookFolderId,
            $productId,
            $planId,
            $country,
            $availableWords,
            $availableWordsPrepaid,
            $totalWords,
            $availableImages,
            $availableImagesPrepaid,
            $totalImages,
            $balance,
            $totalChars,
            $availableChars,
            $availableCharsPrepaid,
            $totalMinutes,
            $availableMinutes,
            $availableMinutesPrepaid,
            $memberRole,
            $parentId,
            $google2faEnabled,
            $referralId,
            $referredBy,
            $defaultVoiceoverLanguage,
            $defaultTempLanguage,
            $defaultVoiceoverVoice,
            $createdAt,
            $updatedAt
        ));
    }

    /**
     * Sets subdomain field.
     */
    public function subdomain(?string $value): self
    {
        $this->instance->setSubdomain($value);
        return $this;
    }

    /**
     * Sets plan type field.
     */
    public function planType(?string $value): self
    {
        $this->instance->setPlanType($value);
        return $this;
    }

    /**
     * Sets company field.
     */
    public function company(?string $value): self
    {
        $this->instance->setCompany($value);
        return $this;
    }

    /**
     * Sets website field.
     */
    public function website(?string $value): self
    {
        $this->instance->setWebsite($value);
        return $this;
    }

    /**
     * Sets phone number field.
     */
    public function phoneNumber(?string $value): self
    {
        $this->instance->setPhoneNumber($value);
        return $this;
    }

    /**
     * Sets address field.
     */
    public function address(?string $value): self
    {
        $this->instance->setAddress($value);
        return $this;
    }

    /**
     * Sets city field.
     */
    public function city(?string $value): self
    {
        $this->instance->setCity($value);
        return $this;
    }

    /**
     * Sets postal code field.
     */
    public function postalCode(?string $value): self
    {
        $this->instance->setPostalCode($value);
        return $this;
    }

    /**
     * Sets profile photo path field.
     */
    public function profilePhotoPath(?string $value): self
    {
        $this->instance->setProfilePhotoPath($value);
        return $this;
    }

    /**
     * Sets oauth id field.
     */
    public function oauthId(?string $value): self
    {
        $this->instance->setOauthId($value);
        return $this;
    }

    /**
     * Sets oauth type field.
     */
    public function oauthType(?string $value): self
    {
        $this->instance->setOauthType($value);
        return $this;
    }

    /**
     * Sets last seen field.
     */
    public function lastSeen(?string $value): self
    {
        $this->instance->setLastSeen($value);
        return $this;
    }

    /**
     * Sets ckbox field.
     */
    public function ckbox(?string $value): self
    {
        $this->instance->setCkbox($value);
        return $this;
    }

    /**
     * Sets google 2 fa secret field.
     */
    public function google2faSecret(?string $value): self
    {
        $this->instance->setGoogle2faSecret($value);
        return $this;
    }

    /**
     * Sets referral payment method field.
     */
    public function referralPaymentMethod(?string $value): self
    {
        $this->instance->setReferralPaymentMethod($value);
        return $this;
    }

    /**
     * Sets referral paypal field.
     */
    public function referralPaypal(?string $value): self
    {
        $this->instance->setReferralPaypal($value);
        return $this;
    }

    /**
     * Sets referral bank requisites field.
     */
    public function referralBankRequisites(?string $value): self
    {
        $this->instance->setReferralBankRequisites($value);
        return $this;
    }

    /**
     * Sets default tone field.
     */
    public function defaultTone(?string $value): self
    {
        $this->instance->setDefaultTone($value);
        return $this;
    }

    /**
     * Sets subdomain token field.
     */
    public function subdomainToken(?string $value): self
    {
        $this->instance->setSubdomainToken($value);
        return $this;
    }

    /**
     * Initializes a new user object.
     */
    public function build(): User
    {
        return CoreHelper::clone($this->instance);
    }
}
