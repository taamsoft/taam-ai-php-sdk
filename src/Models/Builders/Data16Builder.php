<?php

declare(strict_types=1);

/*
 * TaamAiUserLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace TaamAiUserLib\Models\Builders;

use Core\Utils\CoreHelper;
use TaamAiUserLib\Models\Data16;

/**
 * Builder for model Data16
 *
 * @see Data16
 */
class Data16Builder
{
    /**
     * @var Data16
     */
    private $instance;

    private function __construct(Data16 $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new data 16 Builder object.
     */
    public static function init(
        int $id,
        int $userId,
        string $name,
        string $icon,
        string $description,
        string $templateCode,
        string $lang,
        int $status,
        int $professional,
        int $new,
        int $public,
        int $edit,
        string $group,
        string $slug,
        string $type,
        int $tone,
        array $fields,
        string $package,
        string $createdAt,
        string $updatedAt,
        string $deletedAt
    ): self {
        return new self(new Data16(
            $id,
            $userId,
            $name,
            $icon,
            $description,
            $templateCode,
            $lang,
            $status,
            $professional,
            $new,
            $public,
            $edit,
            $group,
            $slug,
            $type,
            $tone,
            $fields,
            $package,
            $createdAt,
            $updatedAt,
            $deletedAt
        ));
    }

    /**
     * Sets image field.
     */
    public function image(?string $value): self
    {
        $this->instance->setImage($value);
        return $this;
    }

    /**
     * Sets prompt field.
     */
    public function prompt(?string $value): self
    {
        $this->instance->setPrompt($value);
        return $this;
    }

    /**
     * Initializes a new data 16 object.
     */
    public function build(): Data16
    {
        return CoreHelper::clone($this->instance);
    }
}
