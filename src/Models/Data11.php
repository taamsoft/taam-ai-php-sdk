<?php

declare(strict_types=1);

/*
 * TaamAiUserLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace TaamAiUserLib\Models;

use stdClass;

class Data11 implements \JsonSerializable
{
    /**
     * @var int
     */
    private $id;

    /**
     * @var string
     */
    private $createdAt;

    /**
     * @var string
     */
    private $updatedAt;

    /**
     * @var string|null
     */
    private $deletedAt;

    /**
     * @var string
     */
    private $alias;

    /**
     * @var string
     */
    private $name;

    /**
     * @var string
     */
    private $type;

    /**
     * @var string
     */
    private $lang;

    /**
     * @var string
     */
    private $content;

    /**
     * @var string
     */
    private $response;

    /**
     * @var int
     */
    private $userId;

    /**
     * @var int
     */
    private $paid;

    /**
     * @var int
     */
    private $ai;

    /**
     * @var int
     */
    private $aiDone;

    /**
     * @var int
     */
    private $aiUsedTokens;

    /**
     * @var int
     */
    private $active;

    /**
     * @var int
     */
    private $price;

    /**
     * @var string
     */
    private $md;

    /**
     * @param int $id
     * @param string $createdAt
     * @param string $updatedAt
     * @param string $alias
     * @param string $name
     * @param string $type
     * @param string $lang
     * @param string $content
     * @param string $response
     * @param int $userId
     * @param int $paid
     * @param int $ai
     * @param int $aiDone
     * @param int $aiUsedTokens
     * @param int $active
     * @param int $price
     * @param string $md
     */
    public function __construct(
        int $id,
        string $createdAt,
        string $updatedAt,
        string $alias,
        string $name,
        string $type,
        string $lang,
        string $content,
        string $response,
        int $userId,
        int $paid,
        int $ai,
        int $aiDone,
        int $aiUsedTokens,
        int $active,
        int $price,
        string $md
    ) {
        $this->id = $id;
        $this->createdAt = $createdAt;
        $this->updatedAt = $updatedAt;
        $this->alias = $alias;
        $this->name = $name;
        $this->type = $type;
        $this->lang = $lang;
        $this->content = $content;
        $this->response = $response;
        $this->userId = $userId;
        $this->paid = $paid;
        $this->ai = $ai;
        $this->aiDone = $aiDone;
        $this->aiUsedTokens = $aiUsedTokens;
        $this->active = $active;
        $this->price = $price;
        $this->md = $md;
    }

    /**
     * Returns Id.
     */
    public function getId(): int
    {
        return $this->id;
    }

    /**
     * Sets Id.
     *
     * @required
     * @maps id
     */
    public function setId(int $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Created At.
     */
    public function getCreatedAt(): string
    {
        return $this->createdAt;
    }

    /**
     * Sets Created At.
     *
     * @required
     * @maps created_at
     */
    public function setCreatedAt(string $createdAt): void
    {
        $this->createdAt = $createdAt;
    }

    /**
     * Returns Updated At.
     */
    public function getUpdatedAt(): string
    {
        return $this->updatedAt;
    }

    /**
     * Sets Updated At.
     *
     * @required
     * @maps updated_at
     */
    public function setUpdatedAt(string $updatedAt): void
    {
        $this->updatedAt = $updatedAt;
    }

    /**
     * Returns Deleted At.
     */
    public function getDeletedAt(): ?string
    {
        return $this->deletedAt;
    }

    /**
     * Sets Deleted At.
     *
     * @maps deleted_at
     */
    public function setDeletedAt(?string $deletedAt): void
    {
        $this->deletedAt = $deletedAt;
    }

    /**
     * Returns Alias.
     */
    public function getAlias(): string
    {
        return $this->alias;
    }

    /**
     * Sets Alias.
     *
     * @required
     * @maps alias
     */
    public function setAlias(string $alias): void
    {
        $this->alias = $alias;
    }

    /**
     * Returns Name.
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Sets Name.
     *
     * @required
     * @maps name
     */
    public function setName(string $name): void
    {
        $this->name = $name;
    }

    /**
     * Returns Type.
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     *
     * @required
     * @maps type
     */
    public function setType(string $type): void
    {
        $this->type = $type;
    }

    /**
     * Returns Lang.
     */
    public function getLang(): string
    {
        return $this->lang;
    }

    /**
     * Sets Lang.
     *
     * @required
     * @maps lang
     */
    public function setLang(string $lang): void
    {
        $this->lang = $lang;
    }

    /**
     * Returns Content.
     */
    public function getContent(): string
    {
        return $this->content;
    }

    /**
     * Sets Content.
     *
     * @required
     * @maps content
     */
    public function setContent(string $content): void
    {
        $this->content = $content;
    }

    /**
     * Returns Response.
     */
    public function getResponse(): string
    {
        return $this->response;
    }

    /**
     * Sets Response.
     *
     * @required
     * @maps response
     */
    public function setResponse(string $response): void
    {
        $this->response = $response;
    }

    /**
     * Returns User Id.
     */
    public function getUserId(): int
    {
        return $this->userId;
    }

    /**
     * Sets User Id.
     *
     * @required
     * @maps user_id
     */
    public function setUserId(int $userId): void
    {
        $this->userId = $userId;
    }

    /**
     * Returns Paid.
     */
    public function getPaid(): int
    {
        return $this->paid;
    }

    /**
     * Sets Paid.
     *
     * @required
     * @maps paid
     */
    public function setPaid(int $paid): void
    {
        $this->paid = $paid;
    }

    /**
     * Returns Ai.
     */
    public function getAi(): int
    {
        return $this->ai;
    }

    /**
     * Sets Ai.
     *
     * @required
     * @maps ai
     */
    public function setAi(int $ai): void
    {
        $this->ai = $ai;
    }

    /**
     * Returns Ai Done.
     */
    public function getAiDone(): int
    {
        return $this->aiDone;
    }

    /**
     * Sets Ai Done.
     *
     * @required
     * @maps ai_done
     */
    public function setAiDone(int $aiDone): void
    {
        $this->aiDone = $aiDone;
    }

    /**
     * Returns Ai Used Tokens.
     */
    public function getAiUsedTokens(): int
    {
        return $this->aiUsedTokens;
    }

    /**
     * Sets Ai Used Tokens.
     *
     * @required
     * @maps ai_used_tokens
     */
    public function setAiUsedTokens(int $aiUsedTokens): void
    {
        $this->aiUsedTokens = $aiUsedTokens;
    }

    /**
     * Returns Active.
     */
    public function getActive(): int
    {
        return $this->active;
    }

    /**
     * Sets Active.
     *
     * @required
     * @maps active
     */
    public function setActive(int $active): void
    {
        $this->active = $active;
    }

    /**
     * Returns Price.
     */
    public function getPrice(): int
    {
        return $this->price;
    }

    /**
     * Sets Price.
     *
     * @required
     * @maps price
     */
    public function setPrice(int $price): void
    {
        $this->price = $price;
    }

    /**
     * Returns Md.
     */
    public function getMd(): string
    {
        return $this->md;
    }

    /**
     * Sets Md.
     *
     * @required
     * @maps md
     */
    public function setMd(string $md): void
    {
        $this->md = $md;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['id']             = $this->id;
        $json['created_at']     = $this->createdAt;
        $json['updated_at']     = $this->updatedAt;
        $json['deleted_at']     = $this->deletedAt;
        $json['alias']          = $this->alias;
        $json['name']           = $this->name;
        $json['type']           = $this->type;
        $json['lang']           = $this->lang;
        $json['content']        = $this->content;
        $json['response']       = $this->response;
        $json['user_id']        = $this->userId;
        $json['paid']           = $this->paid;
        $json['ai']             = $this->ai;
        $json['ai_done']        = $this->aiDone;
        $json['ai_used_tokens'] = $this->aiUsedTokens;
        $json['active']         = $this->active;
        $json['price']          = $this->price;
        $json['md']             = $this->md;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
