<?php

declare(strict_types=1);

/*
 * TaamAiUserLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace TaamAiUserLib\Tests\Controllers;

use Core\TestCase\BodyMatchers\KeysBodyMatcher;
use Core\TestCase\TestParam;
use TaamAiUserLib\Controllers\ProductController;
use TaamAiUserLib\Exceptions;

class ProductControllerTest extends BaseTestController
{
    /**
     * @var ProductController ProductController instance
     */
    protected static $controller;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$controller = parent::getClient()->getProductController();
    }

    public function testUserProductd()
    {
        // Parameters for the API call
        $userId = 1;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->userProductd($userId);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Host'] = ['127.0.0.1:8000', false];
        $headers['Date'] = ['Sat, 30 Sep 2023 07:26:32 GMT', false];
        $headers['Connection'] = ['close', false];
        $headers['X-Powered-By'] = ['PHP/8.1.6', false];
        $headers['Cache-Control'] = ['no-cache, private', false];
        $headers['X-RateLimit-Limit'] = ['60', false];
        $headers['X-RateLimit-Remaining'] = ['58', false];
        $headers['Access-Control-Allow-Origin'] = ['*', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(
                TestParam::object(
                    "{\r\n  \"status\": \"success\",\r\n  \"message\": \"Data fateched Successf" .
                    "ully\",\r\n  \"data\": [\r\n    {\r\n      \"id\": 4,\r\n      \"user_id\":" .
                    " 1,\r\n      \"name\": \"Programming new\",\r\n      \"description\": \"Get" .
                    " your code\",\r\n      \"feature_image\": \"assets/product_feature/64a71a7d" .
                    "35b1c_image.png\",\r\n      \"bullet_points\": \"55\",\r\n      \"target_au" .
                    "dience\": \"55\",\r\n      \"tags\": \"[\\\"sdffddf\\\",\\\"dfgfhjhk\\\"," .
                    "\\\"dfghjk\\\"]\",\r\n      \"deleted_at\": null\r\n    },\r\n    {\r\n    " .
                    "  \"id\": 5,\r\n      \"user_id\": 11,\r\n      \"name\": \"shahzaman\",\r" .
                    "\n      \"description\": \"detail about shahzaman\",\r\n      \"feature_ima" .
                    "ge\": null,\r\n      \"bullet_points\": \"55\",\r\n      \"target_audience" .
                    "\": \"55\",\r\n      \"tags\": null,\r\n      \"deleted_at\": null\r\n    }" .
                    ",\r\n    {\r\n      \"id\": 6,\r\n      \"user_id\": 0,\r\n      \"name\": " .
                    "\"MATGARLI SAAS\",\r\n      \"description\": \"matgarli saas applcation hel" .
                    "p the vendors to  create online store in one click , the veondors can sell " .
                    "any kind of products\",\r\n      \"feature_image\": \"https://www.taamfly.c" .
                    "om/assets/empty.jpg\",\r\n      \"bullet_points\": \"55\",\r\n      \"targe" .
                    "t_audience\": \"vendors , sellers\",\r\n      \"tags\": \"[\\\"vendors\\\"," .
                    "\\\"sellers\\\"]\",\r\n      \"deleted_at\": null\r\n    },\r\n    {\r\n   " .
                    "   \"id\": 7,\r\n      \"user_id\": 0,\r\n      \"name\": \"asdas\",\r\n   " .
                    "   \"description\": \"sdfsdfsd\",\r\n      \"feature_image\": \"https://taa" .
                    "mfly.com/assets/empty.jpg\",\r\n      \"bullet_points\": \"1321\",\r\n     " .
                    " \"target_audience\": \"dfdsgsd\",\r\n      \"tags\": \"[\\\"asdas\\\"]\"," .
                    "\r\n      \"deleted_at\": null\r\n    },\r\n    {\r\n      \"id\": 8,\r\n  " .
                    "    \"user_id\": 0,\r\n      \"name\": \"new\",\r\n      \"description\": " .
                    "\"new\",\r\n      \"feature_image\": \"https://taamfly.com/assets/empty.jpg" .
                    "\",\r\n      \"bullet_points\": \"32321\",\r\n      \"target_audience\": \"" .
                    "dfdsgsd\",\r\n      \"tags\": \"[\\\"asd\\\"]\",\r\n      \"deleted_at\": n" .
                    "ull\r\n    },\r\n    {\r\n      \"id\": 9,\r\n      \"user_id\": 1,\r\n    " .
                    "  \"name\": \"truth smokeshop and vape\",\r\n      \"description\": \"The t" .
                    "op smoke shop and vapes and the best customer support. Shop for bongs, dab " .
                    "rigs, hand pipes, vaporizers and other smoking accessories.\",\r\n      \"f" .
                    "eature_image\": \"assets/product_feature/64b89f965465f_Truth.png\",\r\n    " .
                    "  \"bullet_points\": \"asdas\",\r\n      \"target_audience\": \"all\",\r\n " .
                    "     \"tags\": \"[\\\"vapes\\\",\\\"tobacco\\\"]\",\r\n      \"deleted_at\"" .
                    ": null\r\n    }\r\n  ]\r\n}"
                )
            ))
            ->assert();
    }

    public function testTrashedProducts()
    {
        // Parameters for the API call
        $userId = 1;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->trashedProducts($userId);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Host'] = ['127.0.0.1:8000', false];
        $headers['Date'] = ['Sat, 30 Sep 2023 08:18:53 GMT', false];
        $headers['Connection'] = ['close', false];
        $headers['X-Powered-By'] = ['PHP/8.1.6', false];
        $headers['Cache-Control'] = ['no-cache, private', false];
        $headers['X-RateLimit-Limit'] = ['60', false];
        $headers['X-RateLimit-Remaining'] = ['57', false];
        $headers['Access-Control-Allow-Origin'] = ['*', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(
                TestParam::object(
                    "{\r\n  \"status\": \"success\",\r\n  \"message\": \"Data fateched Successf" .
                    "ully\",\r\n  \"data\": [\r\n    {\r\n      \"id\": 10,\r\n      \"user_id\"" .
                    ": 1,\r\n      \"name\": \"New Product\",\r\n      \"description\": \"THis i" .
                    "s testing\",\r\n      \"feature_image\": \"http://127.0.0.1:8000/assets/emp" .
                    "ty.jpg\",\r\n      \"bullet_points\": \"friend\",\r\n      \"target_audienc" .
                    "e\": \"males\",\r\n      \"tags\": \"null\",\r\n      \"deleted_at\": \"202" .
                    "3-09-30T08:18:41.000000Z\"\r\n    }\r\n  ]\r\n}"
                )
            ))
            ->assert();
    }

    public function testCreateProduct()
    {
        // Parameters for the API call
        $userId = 1;
        $name = 'New Product';
        $description = 'THis is testing';
        $bulletPoints = 'friend';
        $targetAudience = 'males';
        $tags0 = 'hello';
        $tags1 = 'friend';

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->createProduct(
                $userId,
                $name,
                $description,
                $bulletPoints,
                $targetAudience,
                $tags0,
                $tags1
            );
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Host'] = ['127.0.0.1:8000', false];
        $headers['Date'] = ['Sat, 30 Sep 2023 07:57:58 GMT', false];
        $headers['Connection'] = ['close', false];
        $headers['X-Powered-By'] = ['PHP/8.1.6', false];
        $headers['Cache-Control'] = ['no-cache, private', false];
        $headers['X-RateLimit-Limit'] = ['60', false];
        $headers['X-RateLimit-Remaining'] = ['58', false];
        $headers['Access-Control-Allow-Origin'] = ['*', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"status\": \"success\",\r\n  \"message\": \"Product Created Successfully\"\r\n}"
            )))
            ->assert();
    }

    public function testDeleteProduct()
    {
        // Parameters for the API call
        $userId = 1;
        $productId = 10;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->deleteProduct($userId, $productId);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Host'] = ['127.0.0.1:8000', false];
        $headers['Date'] = ['Sat, 30 Sep 2023 08:18:41 GMT', false];
        $headers['Connection'] = ['close', false];
        $headers['X-Powered-By'] = ['PHP/8.1.6', false];
        $headers['Cache-Control'] = ['no-cache, private', false];
        $headers['X-RateLimit-Limit'] = ['60', false];
        $headers['X-RateLimit-Remaining'] = ['58', false];
        $headers['Access-Control-Allow-Origin'] = ['*', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"status\": \"success\",\r\n  \"message\": \"Product Deleted Successfully\"\r\n}"
            )))
            ->assert();
    }

    public function testRestoreProduct()
    {
        // Parameters for the API call
        $userId = 1;
        $productId = 10;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->restoreProduct($userId, $productId);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Host'] = ['127.0.0.1:8000', false];
        $headers['Date'] = ['Sat, 30 Sep 2023 08:20:35 GMT', false];
        $headers['Connection'] = ['close', false];
        $headers['X-Powered-By'] = ['PHP/8.1.6', false];
        $headers['Cache-Control'] = ['no-cache, private', false];
        $headers['X-RateLimit-Limit'] = ['60', false];
        $headers['X-RateLimit-Remaining'] = ['58', false];
        $headers['Access-Control-Allow-Origin'] = ['*', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"status\": \"success\",\r\n  \"message\": \"Product Restored Successfully\"\r\n}"
            )))
            ->assert();
    }

    public function testParmenentDeleteProduct()
    {
        // Parameters for the API call
        $userId = 1;
        $productId = 10;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->parmenentDeleteProduct($userId, $productId);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Host'] = ['127.0.0.1:8000', false];
        $headers['Date'] = ['Sat, 30 Sep 2023 08:28:55 GMT', false];
        $headers['Connection'] = ['close', false];
        $headers['X-Powered-By'] = ['PHP/8.1.6', false];
        $headers['Cache-Control'] = ['no-cache, private', false];
        $headers['X-RateLimit-Limit'] = ['60', false];
        $headers['X-RateLimit-Remaining'] = ['57', false];
        $headers['Access-Control-Allow-Origin'] = ['*', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"status\": \"success\",\r\n  \"message\": \"Product Deleted Permanently\"\r\n}"
            )))
            ->assert();
    }

    public function testUpdateProduct()
    {
        // Parameters for the API call
        $userId = 1;
        $productId = 11;
        $name = 'updated';
        $description = 'updated';
        $bulletPoints = 11;
        $targetAudience = 'females';
        $tags0 = 'new';

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->updateProduct(
                $userId,
                $productId,
                $name,
                $description,
                $bulletPoints,
                $targetAudience,
                $tags0
            );
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Host'] = ['127.0.0.1:8000', false];
        $headers['Date'] = ['Sat, 30 Sep 2023 08:57:42 GMT', false];
        $headers['Connection'] = ['close', false];
        $headers['X-Powered-By'] = ['PHP/8.1.6', false];
        $headers['Cache-Control'] = ['no-cache, private', false];
        $headers['X-RateLimit-Limit'] = ['60', false];
        $headers['X-RateLimit-Remaining'] = ['58', false];
        $headers['Access-Control-Allow-Origin'] = ['*', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"status\": \"success\",\r\n  \"message\": \"Product Updated Successfully\"\r\n}"
            )))
            ->assert();
    }
}
