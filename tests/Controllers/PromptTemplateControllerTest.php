<?php

declare(strict_types=1);

/*
 * TaamAiUserLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace TaamAiUserLib\Tests\Controllers;

use Core\TestCase\BodyMatchers\KeysBodyMatcher;
use Core\TestCase\TestParam;
use TaamAiUserLib\Controllers\PromptTemplateController;
use TaamAiUserLib\Exceptions;

class PromptTemplateControllerTest extends BaseTestController
{
    /**
     * @var PromptTemplateController PromptTemplateController instance
     */
    protected static $controller;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$controller = parent::getClient()->getPromptTemplateController();
    }

    public function testPromptTemplates()
    {
        // Parameters for the API call
        $userId = 1;
        $cat = 'publc';
        $subCat = 'all';

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->promptTemplates($userId, $cat, $subCat);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Host'] = ['127.0.0.1:8000', false];
        $headers['Date'] = ['Mon, 02 Oct 2023 07:19:53 GMT', false];
        $headers['Connection'] = ['close', false];
        $headers['X-Powered-By'] = ['PHP/8.1.6', false];
        $headers['Cache-Control'] = ['no-cache, private', false];
        $headers['X-RateLimit-Limit'] = ['60', false];
        $headers['X-RateLimit-Remaining'] = ['59', false];
        $headers['Access-Control-Allow-Origin'] = ['*', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(
                TestParam::object(
                    "{\r\n  \"status\": \"success\",\r\n  \"message\": \"Data Fateched Successf" .
                    "ully\",\r\n  \"data\": [\r\n    {\r\n      \"id\": 3,\r\n      \"user_id\":" .
                    " 1,\r\n      \"name\": \"Sobi Rajpoot\",\r\n      \"icon\": \"<i class=\\\"" .
                    "fa-solid fa-search-minus blog-icon\\\"></i>\",\r\n      \"image\": null,\r" .
                    "\n      \"description\": \"tone of voice generator\",\r\n      \"template_c" .
                    "ode\": \"DAQGY\",\r\n      \"lang\": \"en-US\",\r\n      \"status\": 1,\r\n" .
                    "      \"professional\": 0,\r\n      \"new\": 0,\r\n      \"public\": 0,\r\n" .
                    "      \"edit\": 0,\r\n      \"group\": \"public\",\r\n      \"slug\": \"cus" .
                    "tom-template\",\r\n      \"type\": \"custom\",\r\n      \"prompt\": null,\r" .
                    "\n      \"tone\": 0,\r\n      \"fields\": [],\r\n      \"package\": \"all\"" .
                    ",\r\n      \"created_at\": \"2023-07-24T13:04:48.000000Z\",\r\n      \"upda" .
                    "ted_at\": \"2023-07-24T13:04:48.000000Z\",\r\n      \"deleted_at\": null\r" .
                    "\n    }\r\n  ]\r\n}"
                )
            ))
            ->assert();
    }

    public function testAddAndRemoveFromBookmarkPromptTemplate()
    {
        // Parameters for the API call
        $userId = 1;
        $templateId = 1;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->addAndRemoveFromBookmarkPromptTemplate($userId, $templateId);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Host'] = ['127.0.0.1:8000', false];
        $headers['Date'] = ['Mon, 02 Oct 2023 07:31:10 GMT', false];
        $headers['Connection'] = ['close', false];
        $headers['X-Powered-By'] = ['PHP/8.1.6', false];
        $headers['Cache-Control'] = ['no-cache, private', false];
        $headers['X-RateLimit-Limit'] = ['60', false];
        $headers['X-RateLimit-Remaining'] = ['59', false];
        $headers['Access-Control-Allow-Origin'] = ['*', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"status\": \"success\",\r\n  \"message\": \"Added to bookmark Successfully\"\r\n}"
            )))
            ->assert();
    }

    public function testPromptTemplateLikeOrRemoveFromLike()
    {
        // Parameters for the API call
        $userId = 1;
        $templateId = 1;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->promptTemplateLikeOrRemoveFromLike($userId, $templateId);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Host'] = ['127.0.0.1:8000', false];
        $headers['Date'] = ['Mon, 02 Oct 2023 07:34:57 GMT', false];
        $headers['Connection'] = ['close', false];
        $headers['X-Powered-By'] = ['PHP/8.1.6', false];
        $headers['Cache-Control'] = ['no-cache, private', false];
        $headers['X-RateLimit-Limit'] = ['60', false];
        $headers['X-RateLimit-Remaining'] = ['57', false];
        $headers['Access-Control-Allow-Origin'] = ['*', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"status\": \"success\",\r\n  \"message\": \"added to Liked list\",\r\n" .
                "  \"count\": 1\r\n}"
            )))
            ->assert();
    }

    public function testCreatePromptTemplate()
    {
        // Parameters for the API call
        $userId = 1;
        $mPublic = 1;
        $edit = 1;
        $name = 'New checking';
        $activate = 1;
        $tone = 1;
        $prompt = 'Want to create vlog';
        $language = 'en-US';
        $package = 'all';
        $category = 'text';
        $names0 = 'new';
        $placeholders0 = 'Enter relavent information';
        $code0 = 'input-field-1';
        $inputField0 = 'input';

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->createPromptTemplate(
                $userId,
                $mPublic,
                $edit,
                $name,
                $activate,
                $tone,
                $prompt,
                $language,
                $package,
                $category,
                $names0,
                $placeholders0,
                $code0,
                $inputField0
            );
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Host'] = ['127.0.0.1:8000', false];
        $headers['Date'] = ['Mon, 02 Oct 2023 07:58:33 GMT', false];
        $headers['Connection'] = ['close', false];
        $headers['X-Powered-By'] = ['PHP/8.1.6', false];
        $headers['Cache-Control'] = ['no-cache, private', false];
        $headers['X-RateLimit-Limit'] = ['60', false];
        $headers['X-RateLimit-Remaining'] = ['57', false];
        $headers['Access-Control-Allow-Origin'] = ['*', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"status\": \"success\",\r\n  \"message\": \"Prompt template creeated S" .
                "uccessfully\"\r\n}"
            )))
            ->assert();
    }

    public function testTrashedPromptTemplates()
    {
        // Parameters for the API call
        $userId = 1;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->trashedPromptTemplates($userId);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Host'] = ['127.0.0.1:8000', false];
        $headers['Date'] = ['Mon, 02 Oct 2023 08:21:06 GMT', false];
        $headers['Connection'] = ['close', false];
        $headers['X-Powered-By'] = ['PHP/8.1.6', false];
        $headers['Cache-Control'] = ['no-cache, private', false];
        $headers['X-RateLimit-Limit'] = ['60', false];
        $headers['X-RateLimit-Remaining'] = ['57', false];
        $headers['Access-Control-Allow-Origin'] = ['*', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"status\": \"success\",\r\n  \"message\": \"Data Fatched Successfully" .
                "\",\r\n  \"data\": [\r\n    {\r\n      \"id\": 2,\r\n      \"user_id\": 1,\r\n " .
                "     \"name\": \"a\",\r\n      \"icon\": \"<i class=\\\"fa-solid fa-power-off b" .
                "log-icon\\\"></i>\",\r\n      \"image\": null,\r\n      \"description\": \"a\"," .
                "\r\n      \"template_code\": \"7AUBC\",\r\n      \"lang\": \"en-US\",\r\n      " .
                "\"status\": 1,\r\n      \"professional\": 0,\r\n      \"new\": 0,\r\n      \"pu" .
                "blic\": 1,\r\n      \"edit\": 0,\r\n      \"group\": \"public\",\r\n      \"slu" .
                "g\": \"custom-template\",\r\n      \"type\": \"custom\",\r\n      \"prompt\": n" .
                "ull,\r\n      \"tone\": 0,\r\n      \"fields\": [],\r\n      \"package\": \"all" .
                "\",\r\n      \"created_at\": \"2023-07-21T11:48:04.000000Z\",\r\n      \"update" .
                "d_at\": \"2023-09-04T09:04:34.000000Z\",\r\n      \"deleted_at\": \"2023-09-04T" .
                "09:04:34.000000Z\"\r\n    }\r\n  ]\r\n}"
            )))
            ->assert();
    }

    public function testDeletePrmoptTemplate()
    {
        // Parameters for the API call
        $userId = 1;
        $templateId = 3;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->deletePrmoptTemplate($userId, $templateId);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Host'] = ['127.0.0.1:8000', false];
        $headers['Date'] = ['Mon, 02 Oct 2023 08:25:06 GMT', false];
        $headers['Connection'] = ['close', false];
        $headers['X-Powered-By'] = ['PHP/8.1.6', false];
        $headers['Cache-Control'] = ['no-cache, private', false];
        $headers['X-RateLimit-Limit'] = ['60', false];
        $headers['X-RateLimit-Remaining'] = ['58', false];
        $headers['Access-Control-Allow-Origin'] = ['*', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(
                TestParam::object(
                    "{\r\n  \"status\": \"success\",\r\n  \"message\": \"Deleted Successfully\"\r\n}"
                )
            ))
            ->assert();
    }

    public function testRestorePromptTemplate()
    {
        // Parameters for the API call
        $userId = 1;
        $templateId = 3;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->restorePromptTemplate($userId, $templateId);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Host'] = ['127.0.0.1:8000', false];
        $headers['Date'] = ['Mon, 02 Oct 2023 08:27:20 GMT', false];
        $headers['Connection'] = ['close', false];
        $headers['X-Powered-By'] = ['PHP/8.1.6', false];
        $headers['Cache-Control'] = ['no-cache, private', false];
        $headers['X-RateLimit-Limit'] = ['60', false];
        $headers['X-RateLimit-Remaining'] = ['58', false];
        $headers['Access-Control-Allow-Origin'] = ['*', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(
                TestParam::object(
                    "{\r\n  \"status\": \"success\",\r\n  \"message\": \"Restored Successfully\"\r\n}"
                )
            ))
            ->assert();
    }

    public function testParmanentDeletePromptTemplate()
    {
        // Parameters for the API call
        $userId = 1;
        $templateId = 3;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->parmanentDeletePromptTemplate($userId, $templateId);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Host'] = ['127.0.0.1:8000', false];
        $headers['Date'] = ['Mon, 02 Oct 2023 08:33:28 GMT', false];
        $headers['Connection'] = ['close', false];
        $headers['X-Powered-By'] = ['PHP/8.1.6', false];
        $headers['Cache-Control'] = ['no-cache, private', false];
        $headers['X-RateLimit-Limit'] = ['60', false];
        $headers['X-RateLimit-Remaining'] = ['58', false];
        $headers['Access-Control-Allow-Origin'] = ['*', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(
                TestParam::object("{\r\n  \"status\": \"error\",\r\n  \"message\": \"Not Found\"\r\n}")
            ))
            ->assert();
    }

    public function testGeneratePromptTemplate()
    {
        // Parameters for the API call
        $userId = 1;
        $templateCode = 'SXHY9';
        $language = 'en-US';
        $maxResults = 1;
        $words = 10000;
        $creativity = 0.5;
        $title = 'new';
        $description = 'something new';
        $workbookId = 1;
        $folderId = 1;
        $text1 = 'hello';

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->generatePromptTemplate(
                $userId,
                $templateCode,
                $language,
                $maxResults,
                $words,
                $creativity,
                $title,
                $description,
                $workbookId,
                $folderId,
                $text1
            );
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Host'] = ['127.0.0.1:8000', false];
        $headers['Date'] = ['Mon, 02 Oct 2023 10:36:36 GMT', false];
        $headers['Connection'] = ['close', false];
        $headers['X-Powered-By'] = ['PHP/8.1.6', false];
        $headers['Cache-Control'] = ['no-cache, private', false];
        $headers['X-RateLimit-Limit'] = ['60', false];
        $headers['X-RateLimit-Remaining'] = ['58', false];
        $headers['Access-Control-Allow-Origin'] = ['*', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"status\": \"success\",\r\n  \"max_results\": \"1\",\r\n  \"temperatur" .
                "e\": \"0.5\",\r\n  \"max_words\": \"1000\",\r\n  \"id\": 379\r\n}"
            )))
            ->assert();
    }
}
