<?php

declare(strict_types=1);

/*
 * TaamAiUserLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace TaamAiUserLib\Tests\Controllers;

use Core\TestCase\BodyMatchers\KeysBodyMatcher;
use Core\TestCase\TestParam;
use TaamAiUserLib\Controllers\CustimTemplatesController;
use TaamAiUserLib\Exceptions;

class CustimTemplatesControllerTest extends BaseTestController
{
    /**
     * @var CustimTemplatesController CustimTemplatesController instance
     */
    protected static $controller;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$controller = parent::getClient()->getCustimTemplatesController();
    }

    public function testCustomTemplates()
    {
        // Parameters for the API call
        $userId = 40;

        // Perform API call
        try {
            self::$controller->customTemplates($userId);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }

    public function testFavCustomTemplates()
    {
        // Parameters for the API call
        $userId = 40;

        // Perform API call
        try {
            self::$controller->favCustomTemplates($userId);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }

    public function testCustomTemplateGenerate()
    {
        // Parameters for the API call
        $userId = 40;
        $templateCode = 'AZL78';
        $language = 'en-US';
        $maxResults = 1;
        $words = 100;
        $creativity = 0.5;
        $title = 'code';
        $description = 'code';
        $workbookId = 1;
        $folderId = 1;
        $text = 'hello';
        $text2 = 'really';

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->customTemplateGenerate(
                $userId,
                $templateCode,
                $language,
                $maxResults,
                $words,
                $creativity,
                $title,
                $description,
                $workbookId,
                $folderId,
                $text,
                $text2
            );
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Host'] = ['127.0.0.1:8000', false];
        $headers['Date'] = ['Wed, 20 Sep 2023 10:58:02 GMT', false];
        $headers['Connection'] = ['close', false];
        $headers['X-Powered-By'] = ['PHP/8.1.6', false];
        $headers['Cache-Control'] = ['no-cache, private', false];
        $headers['X-RateLimit-Limit'] = ['60', false];
        $headers['X-RateLimit-Remaining'] = ['59', false];
        $headers['Access-Control-Allow-Origin'] = ['*', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"status\": \"success\",\r\n  \"max_results\": \"1\",\r\n  \"temperatur" .
                "e\": \"0.5\",\r\n  \"max_words\": 100,\r\n  \"id\": 289\r\n}"
            )))
            ->assert();
    }

    public function testCreateCustomTemplate()
    {
        // Perform API call
        $result = null;
        try {
            $result = self::$controller->createCustomTemplate();
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Host'] = ['127.0.0.1:8000', false];
        $headers['Date'] = ['Sat, 30 Sep 2023 13:35:17 GMT', false];
        $headers['Connection'] = ['close', false];
        $headers['X-Powered-By'] = ['PHP/8.1.6', false];
        $headers['Cache-Control'] = ['no-cache, private', false];
        $headers['X-RateLimit-Limit'] = ['60', false];
        $headers['X-RateLimit-Remaining'] = ['59', false];
        $headers['Access-Control-Allow-Origin'] = ['*', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"code\": \"200\",\r\n  \"status\": \"success\",\r\n  \"message\": \"te" .
                "mplate Created Successfully\",\r\n  \"data\": {\r\n    \"user_id\": \"1\",\r\n " .
                "   \"description\": null,\r\n    \"status\": true,\r\n    \"professional\": fal" .
                "se,\r\n    \"template_code\": \"KOWPI\",\r\n    \"name\": \"new\",\r\n    \"ico" .
                "n\": \"<i class=\\\"fa-solid  blog-icon\\\"></i>\",\r\n    \"group\": \"text\"," .
                "\r\n    \"slug\": \"custom-template\",\r\n    \"prompt\": \"Tone of voice gener" .
                "ator\",\r\n    \"tone\": true,\r\n    \"fields\": [\r\n      {\r\n        \"nam" .
                "e\": \"text1\",\r\n        \"placeholder\": \"Enter the ralevent information\"," .
                "\r\n        \"input\": \"input\",\r\n        \"code\": \"input-field-1\"\r\n   " .
                "   }\r\n    ],\r\n    \"package\": \"all\",\r\n    \"updated_at\": \"2023-09-30" .
                "T13:35:17.000000Z\",\r\n    \"created_at\": \"2023-09-30T13:35:17.000000Z\",\r" .
                "\n    \"id\": 3\r\n  }\r\n}"
            )))
            ->assert();
    }

    public function testTrashedCustomTemplates()
    {
        // Parameters for the API call
        $userId = 1;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->trashedCustomTemplates($userId);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Host'] = ['127.0.0.1:8000', false];
        $headers['Date'] = ['Sat, 30 Sep 2023 14:06:46 GMT', false];
        $headers['Connection'] = ['close', false];
        $headers['X-Powered-By'] = ['PHP/8.1.6', false];
        $headers['Cache-Control'] = ['no-cache, private', false];
        $headers['X-RateLimit-Limit'] = ['60', false];
        $headers['X-RateLimit-Remaining'] = ['58', false];
        $headers['Access-Control-Allow-Origin'] = ['*', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"status\": \"success\",\r\n  \"message\": \"Data Fatched Successfully" .
                "\",\r\n  \"data\": []\r\n}"
            )))
            ->assert();
    }

    public function testDeleteCustomTemplate()
    {
        // Parameters for the API call
        $userId = 1;
        $templateId = 3;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->deleteCustomTemplate($userId, $templateId);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Host'] = ['127.0.0.1:8000', false];
        $headers['Date'] = ['Mon, 02 Oct 2023 08:51:59 GMT', false];
        $headers['Connection'] = ['close', false];
        $headers['X-Powered-By'] = ['PHP/8.1.6', false];
        $headers['Cache-Control'] = ['no-cache, private', false];
        $headers['X-RateLimit-Limit'] = ['60', false];
        $headers['X-RateLimit-Remaining'] = ['58', false];
        $headers['Access-Control-Allow-Origin'] = ['*', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(
                TestParam::object(
                    "{\r\n  \"status\": \"success\",\r\n  \"message\": \"Deleted Successfully\"\r\n}"
                )
            ))
            ->assert();
    }

    public function testRestoreCustomTemplate()
    {
        // Parameters for the API call
        $userId = 1;
        $templateId = 3;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->restoreCustomTemplate($userId, $templateId);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Host'] = ['127.0.0.1:8000', false];
        $headers['Date'] = ['Mon, 02 Oct 2023 08:52:56 GMT', false];
        $headers['Connection'] = ['close', false];
        $headers['X-Powered-By'] = ['PHP/8.1.6', false];
        $headers['Cache-Control'] = ['no-cache, private', false];
        $headers['X-RateLimit-Limit'] = ['60', false];
        $headers['X-RateLimit-Remaining'] = ['58', false];
        $headers['Access-Control-Allow-Origin'] = ['*', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(
                TestParam::object(
                    "{\r\n  \"status\": \"success\",\r\n  \"message\": \"Restored Successfully\"\r\n}"
                )
            ))
            ->assert();
    }

    public function testPermanentDeleteCustomTemplate()
    {
        // Perform API call
        $result = null;
        try {
            $result = self::$controller->permanentDeleteCustomTemplate();
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Host'] = ['127.0.0.1:8000', false];
        $headers['Date'] = ['Mon, 02 Oct 2023 08:54:59 GMT', false];
        $headers['Connection'] = ['close', false];
        $headers['X-Powered-By'] = ['PHP/8.1.6', false];
        $headers['Cache-Control'] = ['no-cache, private', false];
        $headers['X-RateLimit-Limit'] = ['60', false];
        $headers['X-RateLimit-Remaining'] = ['59', false];
        $headers['Access-Control-Allow-Origin'] = ['*', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(
                TestParam::object("{\r\n  \"status\": \"success\",\r\n  \"message\": \"Delete Successfully\"\r\n}")
            ))
            ->assert();
    }
}
