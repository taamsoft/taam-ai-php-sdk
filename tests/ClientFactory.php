<?php

declare(strict_types=1);

/*
 * TaamAiUserLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace TaamAiUserLib\Tests;

use Core\Types\CallbackCatcher;

class ClientFactory
{
    public static function create(CallbackCatcher $httpCallback): \TaamAiUserLib\TaamAiUserClient
    {
        $clientBuilder = \TaamAiUserLib\TaamAiUserClientBuilder::init();
        $clientBuilder = self::addConfigurationFromEnvironment($clientBuilder);
        $clientBuilder = self::addTestConfiguration($clientBuilder);
        return $clientBuilder->httpCallback($httpCallback)->build();
    }

    public static function addTestConfiguration(
        \TaamAiUserLib\TaamAiUserClientBuilder $builder
    ): \TaamAiUserLib\TaamAiUserClientBuilder {
        return $builder;
    }

    public static function addConfigurationFromEnvironment(
        \TaamAiUserLib\TaamAiUserClientBuilder $builder
    ): \TaamAiUserLib\TaamAiUserClientBuilder {
        $timeout = getenv('TAAM_AI_USER_LIB_TIMEOUT');
        $numberOfRetries = getenv('TAAM_AI_USER_LIB_NUMBER_OF_RETRIES');
        $maximumRetryWaitTime = getenv('TAAM_AI_USER_LIB_MAXIMUM_RETRY_WAIT_TIME');
        $environment = getenv('TAAM_AI_USER_LIB_ENVIRONMENT');
        $accessToken = getenv('TAAM_AI_USER_LIB_ACCESS_TOKEN');

        if ($timeout !== false && \is_numeric($timeout)) {
            $builder->timeout(intval($timeout));
        }

        if ($numberOfRetries !== false && \is_numeric($numberOfRetries)) {
            $builder->numberOfRetries(intval($numberOfRetries));
        }

        if ($maximumRetryWaitTime !== false && \is_numeric($maximumRetryWaitTime)) {
            $builder->maximumRetryWaitTime(intval($maximumRetryWaitTime));
        }

        if ($environment !== false) {
            $builder->environment($environment);
        }

        if ($accessToken !== false) {
            $builder->accessToken($accessToken);
        }

        return $builder;
    }
}
